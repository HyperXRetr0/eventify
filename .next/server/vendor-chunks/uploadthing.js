"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generatePermittedFileTypes),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @effect/schema/Schema */ \"(ssr)/./node_modules/@effect/schema/dist/esm/Schema.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Effect */ \"(ssr)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var effect_Cause__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Cause */ \"(ssr)/./node_modules/effect/dist/esm/Cause.js\");\n/* harmony import */ var std_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! std-env */ \"(ssr)/./node_modules/std-env/dist/index.mjs\");\n\n\n\n\n\n\nvar version$1 = \"6.10.1\";\nconst uploadMultipartWithProgress = (file, presigned, opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n        let uploadedBytes = 0;\n        const etags = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_1__.forEach(presigned.urls, (url, index)=>{\n            const offset = presigned.chunkSize * index;\n            const end = Math.min(offset + presigned.chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            return uploadPart({\n                url,\n                chunk: chunk,\n                contentDisposition: presigned.contentDisposition,\n                fileType: file.type,\n                fileName: file.name,\n                onProgress: (delta)=>{\n                    uploadedBytes += delta;\n                    const percent = uploadedBytes / file.size * 100;\n                    opts.onUploadProgress?.({\n                        file: file.name,\n                        progress: percent\n                    });\n                }\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.andThen((tag)=>({\n                    tag,\n                    partNumber: index + 1\n                })), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.retry({\n                while: (error)=>error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n                times: std_env__WEBPACK_IMPORTED_MODULE_2__.isTest ? 3 : 10,\n                schedule: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff\n            }));\n        }, {\n            concurrency: \"inherit\"\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.tapErrorCause((error)=>opts.reportEventToUT(\"failure\", {\n                fileKey: presigned.key,\n                uploadId: presigned.uploadId,\n                fileName: file.name,\n                storageProviderError: effect_Cause__WEBPACK_IMPORTED_MODULE_3__.pretty(error).toString()\n            }, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Null)));\n        // Tell the server that the upload is complete\n        yield* opts.reportEventToUT(\"multipart-complete\", {\n            uploadId: presigned.uploadId,\n            fileKey: presigned.key,\n            etags\n        }, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Null);\n    });\nconst uploadPart = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.contentDisposition)(opts.contentDisposition, opts.fileName));\n        xhr.addEventListener(\"load\", ()=>{\n            const etag = xhr.getResponseHeader(\"Etag\");\n            if (xhr.status >= 200 && xhr.status <= 299 && etag) {\n                return resume(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(etag));\n            }\n            return resume(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError()));\n        });\n        xhr.addEventListener(\"error\", ()=>resume(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())));\n        let lastProgress = 0;\n        xhr.upload.addEventListener(\"progress\", (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        });\n        xhr.send(opts.chunk);\n    });\nconst uploadPresignedPostWithProgress = (file, presigned, opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", presigned.url);\n        xhr.setRequestHeader(\"Accept\", \"application/xml\");\n        xhr.upload.addEventListener(\"progress\", ({ loaded, total })=>{\n            opts.onUploadProgress?.({\n                file: file.name,\n                progress: loaded / total * 100\n            });\n        });\n        xhr.addEventListener(\"load\", ()=>resume(xhr.status >= 200 && xhr.status < 300 ? effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(null) : opts.reportEventToUT(\"failure\", {\n                fileKey: presigned.key,\n                uploadId: null,\n                fileName: file.name,\n                storageProviderError: xhr.responseText\n            }, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Null)));\n        xhr.addEventListener(\"error\", ()=>resume(opts.reportEventToUT(\"failure\", {\n                fileKey: presigned.key,\n                uploadId: null,\n                fileName: file.name\n            }, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Null)));\n        const formData = new FormData();\n        Object.entries(presigned.fields).forEach(([k, v])=>formData.append(k, v));\n        formData.append(\"file\", file); // File data **MUST GO LAST**\n        xhr.send(formData);\n    });\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */ const FileUploadDataSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    name: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    size: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n    type: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\nconst FileUploadDataWithCustomIdSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(FileUploadDataSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n}));\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(FileUploadDataWithCustomIdSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n}));\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */ const PresignedBaseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    pollingJwt: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    pollingUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    contentDisposition: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.ContentDispositionSchema,\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n});\nconst MPUResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(PresignedBaseSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    urls: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    chunkSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n    chunkCount: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number\n}));\nconst PSPResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(PresignedBaseSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fields: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Record(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n}));\nconst PresignedURLResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Union(PSPResponseSchema, MPUResponseSchema));\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileData: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        fileSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n        fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        metadata: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        callbackUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        callbackSlug: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n    }))\n});\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n    message: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n});\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */ _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    files: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(FileUploadDataSchema),\n    input: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Unknown\n});\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    storageProviderError: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    etags: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        tag: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        partNumber: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number\n    }))\n});\nconst maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch?.[1];\n    const message = messageMatch?.[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\n/**\n * Map S3 error codes to UploadThing error codes\n *\n * This is a subset of the S3 error codes, based on what seemed most likely to\n * occur in uploadthing. For a full list of S3 error codes, see:\n * https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n */ const DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nconst s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    EntityTooSmall: \"TOO_SMALL\",\n    EntityTooLarge: \"TOO_LARGE\",\n    ExpiredToken: \"FORBIDDEN\",\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */ const createUTReporter = (cfg)=>(type, payload, responseSchema)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n            const url = createAPIRequestUrl({\n                url: cfg.url,\n                slug: cfg.endpoint,\n                actionType: type\n            });\n            let headers = typeof cfg.headers === \"function\" ? cfg.headers() : cfg.headers;\n            if (headers instanceof Promise) {\n                headers = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_1__.promise(()=>headers);\n            }\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)(url, responseSchema, {\n                method: \"POST\",\n                body: JSON.stringify(payload),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-uploadthing-package\": cfg.package,\n                    \"x-uploadthing-version\": version$1,\n                    ...headers\n                }\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"FetchError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: `Failed to report event \"${type}\" to UploadThing server`,\n                    cause: e\n                }))), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.catchTag(\"ParseError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: \"Failed to parse response from UploadThing server\",\n                    cause: e\n                }))));\n            switch(type){\n                case \"failure\":\n                    {\n                        // why isn't this narrowed automatically?\n                        const p = payload;\n                        const parsed = maybeParseResponseXML(p.storageProviderError ?? \"\");\n                        if (parsed?.message) {\n                            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: parsed.code,\n                                message: parsed.message\n                            });\n                        } else {\n                            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Failed to upload file ${p.fileName} to S3`,\n                                cause: p.storageProviderError\n                            });\n                        }\n                    }\n            }\n            return response;\n        });\nconst version = version$1;\nconst uploadFilesInternal = (endpoint, opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n        const reportEventToUT = createUTReporter({\n            endpoint: String(endpoint),\n            package: opts.package,\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(opts.url),\n            headers: opts.headers\n        });\n        const presigneds = yield* reportEventToUT(\"upload\", {\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size,\n                    type: f.type\n                }))\n        }, PresignedURLResponseSchema);\n        return yield* effect_Effect__WEBPACK_IMPORTED_MODULE_1__.forEach(presigneds, (presigned)=>uploadFile(String(endpoint), {\n                ...opts,\n                reportEventToUT\n            }, presigned), {\n            concurrency: 6\n        });\n    });\nconst genUploader = (initOpts)=>{\n    return (endpoint, opts)=>uploadFilesInternal(endpoint, {\n            ...opts,\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            package: initOpts.package,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            input: opts.input\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, {\n            fetch: globalThis.fetch.bind(globalThis),\n            baseHeaders: {\n                \"x-uploadthing-version\": version$1,\n                \"x-uploadthing-api-key\": undefined,\n                \"x-uploadthing-fe-package\": initOpts.package,\n                \"x-uploadthing-be-adapter\": undefined\n            }\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.runPromise);\n};\nconst uploadFile = (slug, opts, presigned)=>effect_Effect__WEBPACK_IMPORTED_MODULE_1__.gen(function*() {\n        const file = opts.files.find((f)=>f.name === presigned.fileName);\n        if (!file) {\n            console.error(\"No file found for presigned URL\", presigned);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: \"No file found for presigned URL\",\n                cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n            });\n        }\n        opts.onUploadBegin?.({\n            file: file.name\n        });\n        if (\"urls\" in presigned) {\n            yield* uploadMultipartWithProgress(file, presigned, opts);\n        } else {\n            yield* uploadPresignedPostWithProgress(file, presigned, opts);\n        }\n        const PollingResponse = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Union(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Literal(\"done\"),\n            callbackData: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Any\n        }), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Literal(\"still waiting\")\n        }));\n        let serverData = null;\n        if (!opts.skipPolling) {\n            serverData = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)(presigned.pollingUrl, PollingResponse, {\n                headers: {\n                    authorization: presigned.pollingJwt\n                }\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_1__.andThen((res)=>res.status === \"done\" ? effect_Effect__WEBPACK_IMPORTED_MODULE_1__.succeed(res.callbackData) : effect_Effect__WEBPACK_IMPORTED_MODULE_1__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_1__.retry({\n                while: (res)=>res instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n                schedule: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff\n            }));\n        }\n        return {\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            serverData: serverData,\n            url: \"https://utfs.io/f/\" + presigned.key,\n            customId: presigned.customId,\n            type: file.type\n        };\n    });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/internal/types.js":
/*!****************************************************!*\
  !*** ./node_modules/uploadthing/internal/types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* binding */ UTFiles),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   VALID_UT_HOOKS: () => (/* binding */ VALID_UT_HOOKS),\n/* harmony export */   isActionType: () => (/* binding */ isActionType),\n/* harmony export */   isUploadThingHook: () => (/* binding */ isUploadThingHook)\n/* harmony export */ });\n/**\n * Marker used to append a `customId` to the incoming file data in `.middleware()`\n * @example\n * ```ts\n * .middleware((opts) => {\n *   return {\n *     [UTFiles]: opts.files.map((file) => ({\n *       ...file,\n *       customId: generateId(),\n *     }))\n *   };\n * })\n * ```\n */ const UTFiles = Symbol(\"uploadthing-custom-id-symbol\");\n/**\n * Valid options for the `?actionType` query param\n */ const VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\nconst isActionType = (input)=>typeof input === \"string\" && VALID_ACTION_TYPES.includes(input);\n/**\n * Valid options for the `uploadthing-hook` header\n * for requests coming from UT server\n */ const VALID_UT_HOOKS = [\n    \"callback\"\n];\nconst isUploadThingHook = (input)=>typeof input === \"string\" && VALID_UT_HOOKS.includes(input);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQUcsTUFBTUEsVUFBVUMsT0FBTztBQUMzQjs7Q0FFQyxHQUFHLE1BQU1DLHFCQUFxQjtJQUMzQjtJQUNBO0lBQ0E7Q0FDSDtBQUNELE1BQU1DLGVBQWUsQ0FBQ0MsUUFBUSxPQUFPQSxVQUFVLFlBQVlGLG1CQUFtQkcsUUFBUSxDQUFDRDtBQUN2Rjs7O0NBR0MsR0FBRyxNQUFNRSxpQkFBaUI7SUFDdkI7Q0FDSDtBQUNELE1BQU1DLG9CQUFvQixDQUFDSCxRQUFRLE9BQU9BLFVBQVUsWUFBWUUsZUFBZUQsUUFBUSxDQUFDRDtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXZlbnRseS8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9pbnRlcm5hbC90eXBlcy5qcz84NjczIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFya2VyIHVzZWQgdG8gYXBwZW5kIGEgYGN1c3RvbUlkYCB0byB0aGUgaW5jb21pbmcgZmlsZSBkYXRhIGluIGAubWlkZGxld2FyZSgpYFxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiAubWlkZGxld2FyZSgob3B0cykgPT4ge1xuICogICByZXR1cm4ge1xuICogICAgIFtVVEZpbGVzXTogb3B0cy5maWxlcy5tYXAoKGZpbGUpID0+ICh7XG4gKiAgICAgICAuLi5maWxlLFxuICogICAgICAgY3VzdG9tSWQ6IGdlbmVyYXRlSWQoKSxcbiAqICAgICB9KSlcbiAqICAgfTtcbiAqIH0pXG4gKiBgYGBcbiAqLyBjb25zdCBVVEZpbGVzID0gU3ltYm9sKFwidXBsb2FkdGhpbmctY3VzdG9tLWlkLXN5bWJvbFwiKTtcbi8qKlxuICogVmFsaWQgb3B0aW9ucyBmb3IgdGhlIGA/YWN0aW9uVHlwZWAgcXVlcnkgcGFyYW1cbiAqLyBjb25zdCBWQUxJRF9BQ1RJT05fVFlQRVMgPSBbXG4gICAgXCJ1cGxvYWRcIixcbiAgICBcImZhaWx1cmVcIixcbiAgICBcIm11bHRpcGFydC1jb21wbGV0ZVwiXG5dO1xuY29uc3QgaXNBY3Rpb25UeXBlID0gKGlucHV0KT0+dHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiICYmIFZBTElEX0FDVElPTl9UWVBFUy5pbmNsdWRlcyhpbnB1dCk7XG4vKipcbiAqIFZhbGlkIG9wdGlvbnMgZm9yIHRoZSBgdXBsb2FkdGhpbmctaG9va2AgaGVhZGVyXG4gKiBmb3IgcmVxdWVzdHMgY29taW5nIGZyb20gVVQgc2VydmVyXG4gKi8gY29uc3QgVkFMSURfVVRfSE9PS1MgPSBbXG4gICAgXCJjYWxsYmFja1wiXG5dO1xuY29uc3QgaXNVcGxvYWRUaGluZ0hvb2sgPSAoaW5wdXQpPT50eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIgJiYgVkFMSURfVVRfSE9PS1MuaW5jbHVkZXMoaW5wdXQpO1xuXG5leHBvcnQgeyBVVEZpbGVzLCBWQUxJRF9BQ1RJT05fVFlQRVMsIFZBTElEX1VUX0hPT0tTLCBpc0FjdGlvblR5cGUsIGlzVXBsb2FkVGhpbmdIb29rIH07XG4iXSwibmFtZXMiOlsiVVRGaWxlcyIsIlN5bWJvbCIsIlZBTElEX0FDVElPTl9UWVBFUyIsImlzQWN0aW9uVHlwZSIsImlucHV0IiwiaW5jbHVkZXMiLCJWQUxJRF9VVF9IT09LUyIsImlzVXBsb2FkVGhpbmdIb29rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/internal/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/next/index.js":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/next/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_1__.UTFiles),\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var uploadthing_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uploadthing/server */ \"(rsc)/./node_modules/uploadthing/server/index.js\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uploadthing/internal/types */ \"(rsc)/./node_modules/uploadthing/internal/types.js\");\n\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\nconst createUploadthing = (opts)=>createBuilder(opts);\nconst createRouteHandler = (opts)=>{\n    const handlers = (0,uploadthing_server__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_DO_NOT_USE_createRouteHandlerCore)(opts, \"nextjs-app\");\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createNextRouteHandler = createRouteHandler;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvbmV4dC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0Y7QUFDM0I7QUFFckQsU0FBU0Usc0JBQXNCQyxLQUFLO0lBQ2hDLE9BQU87UUFDSEMsU0FBU0QsTUFBTUMsT0FBTztJQUMxQjtBQUNKO0FBRUEsU0FBU0Msc0JBQXNCQyxVQUFVLENBQUMsQ0FBQztJQUN2QyxNQUFNQyxPQUFPO1FBQ1Qsd0JBQXdCO1FBQ3hCQyxjQUFjO1lBQ1ZDLE9BQU87Z0JBQ0hDLGFBQWE7WUFDakI7UUFDSjtRQUNBQyxhQUFhO1lBQ1RDLE9BQU8sSUFBSUM7WUFDWEMsUUFBUUQ7WUFDUkUsU0FBU0Y7UUFDYjtRQUNBRyxZQUFZLElBQUssRUFBQztRQUNsQkMsZUFBZSxJQUFLLEVBQUM7UUFDckJDLGdCQUFnQlosUUFBUVksY0FBYyxJQUFJaEI7UUFDMUMscUNBQXFDO1FBQ3JDLEdBQUdJLE9BQU87SUFDZDtJQUNBLE9BQU87UUFDSGEsT0FBT0MsVUFBVTtZQUNiLE9BQU9mLHNCQUFzQjtnQkFDekIsR0FBR0UsSUFBSTtnQkFDUEksYUFBYVM7WUFDakI7UUFDSjtRQUNBSixZQUFZSyxjQUFjO1lBQ3RCLE9BQU9oQixzQkFBc0I7Z0JBQ3pCLEdBQUdFLElBQUk7Z0JBQ1BTLFlBQVlLO1lBQ2hCO1FBQ0o7UUFDQUMsa0JBQWtCQyxrQkFBa0I7WUFDaEMsT0FBTztnQkFDSGhCO2dCQUNBaUIsVUFBVUQ7WUFDZDtRQUNKO1FBQ0FOLGVBQWVRLGlCQUFpQjtZQUM1QixPQUFPcEIsc0JBQXNCO2dCQUN6QixHQUFHRSxJQUFJO2dCQUNQVSxlQUFlUTtZQUNuQjtRQUNKO0lBQ0o7QUFDSjtBQUNBLFNBQVNDLGNBQWNDLElBQUk7SUFDdkIsT0FBTyxDQUFDUjtRQUNKLE9BQU9kLHNCQUFzQjtZQUN6QkcsY0FBY1c7WUFDZCxHQUFHUSxJQUFJO1FBQ1g7SUFDSjtBQUNKO0FBRUEsTUFBTUMsb0JBQW9CLENBQUNELE9BQU9ELGNBQWNDO0FBQ2hELE1BQU1FLHFCQUFxQixDQUFDRjtJQUN4QixNQUFNRyxXQUFXOUIsOEZBQTBDQSxDQUFDMkIsTUFBTTtJQUNsRSxPQUFPO1FBQ0hJLE1BQU0sQ0FBQ0MsTUFBTUYsU0FBU0MsSUFBSSxDQUFDQztRQUMzQkMsS0FBSyxDQUFDRCxNQUFNRixTQUFTRyxHQUFHLENBQUNEO0lBQzdCO0FBQ0o7QUFDQTs7Q0FFQyxHQUFHLE1BQU1FLHlCQUF5Qkw7QUFFc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldmVudGx5Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL25leHQvaW5kZXguanM/YzcwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUgfSBmcm9tICd1cGxvYWR0aGluZy9zZXJ2ZXInO1xuZXhwb3J0IHsgVVRGaWxlcyB9IGZyb20gJ3VwbG9hZHRoaW5nL2ludGVybmFsL3R5cGVzJztcblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yRm9ybWF0dGVyKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQ3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcbiAgICBjb25zdCBfZGVmID0ge1xuICAgICAgICAvLyBEZWZhdWx0IHJvdXRlciBjb25maWdcbiAgICAgICAgcm91dGVyQ29uZmlnOiB7XG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIG1heEZpbGVTaXplOiBcIjRNQlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0UGFyc2VyOiB7XG4gICAgICAgICAgICBwYXJzZTogKCk9PnVuZGVmaW5lZCxcbiAgICAgICAgICAgIF9pbnB1dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX291dHB1dDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZXdhcmU6ICgpPT4oe30pLFxuICAgICAgICBvblVwbG9hZEVycm9yOiAoKT0+KHt9KSxcbiAgICAgICAgZXJyb3JGb3JtYXR0ZXI6IGluaXREZWYuZXJyb3JGb3JtYXR0ZXIgPz8gZGVmYXVsdEVycm9yRm9ybWF0dGVyLFxuICAgICAgICAvLyBPdmVybG9hZCB3aXRoIHByb3BlcnRpZXMgcGFzc2VkIGluXG4gICAgICAgIC4uLmluaXREZWZcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0ICh1c2VyUGFyc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICAuLi5fZGVmLFxuICAgICAgICAgICAgICAgIGlucHV0UGFyc2VyOiB1c2VyUGFyc2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWlkZGxld2FyZSAodXNlck1pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZTogdXNlck1pZGRsZXdhcmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZENvbXBsZXRlICh1c2VyVXBsb2FkQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgX2RlZixcbiAgICAgICAgICAgICAgICByZXNvbHZlcjogdXNlclVwbG9hZENvbXBsZXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZEVycm9yICh1c2VyT25VcGxvYWRFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICAgICAgLi4uX2RlZixcbiAgICAgICAgICAgICAgICBvblVwbG9hZEVycm9yOiB1c2VyT25VcGxvYWRFcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihvcHRzKSB7XG4gICAgcmV0dXJuIChpbnB1dCk9PntcbiAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICByb3V0ZXJDb25maWc6IGlucHV0LFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5jb25zdCBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKT0+Y3JlYXRlQnVpbGRlcihvcHRzKTtcbmNvbnN0IGNyZWF0ZVJvdXRlSGFuZGxlciA9IChvcHRzKT0+e1xuICAgIGNvbnN0IGhhbmRsZXJzID0gSU5URVJOQUxfRE9fTk9UX1VTRV9jcmVhdGVSb3V0ZUhhbmRsZXJDb3JlKG9wdHMsIFwibmV4dGpzLWFwcFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBQT1NUOiAocmVxKT0+aGFuZGxlcnMuUE9TVChyZXEpLFxuICAgICAgICBHRVQ6IChyZXEpPT5oYW5kbGVycy5HRVQocmVxKVxuICAgIH07XG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGNyZWF0ZVJvdXRlSGFuZGxlcn0gaW5zdGVhZFxuICovIGNvbnN0IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIgPSBjcmVhdGVSb3V0ZUhhbmRsZXI7XG5cbmV4cG9ydCB7IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIsIGNyZWF0ZVJvdXRlSGFuZGxlciwgY3JlYXRlVXBsb2FkdGhpbmcgfTtcbiJdLCJuYW1lcyI6WyJJTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUiLCJVVEZpbGVzIiwiZGVmYXVsdEVycm9yRm9ybWF0dGVyIiwiZXJyb3IiLCJtZXNzYWdlIiwiaW50ZXJuYWxDcmVhdGVCdWlsZGVyIiwiaW5pdERlZiIsIl9kZWYiLCJyb3V0ZXJDb25maWciLCJpbWFnZSIsIm1heEZpbGVTaXplIiwiaW5wdXRQYXJzZXIiLCJwYXJzZSIsInVuZGVmaW5lZCIsIl9pbnB1dCIsIl9vdXRwdXQiLCJtaWRkbGV3YXJlIiwib25VcGxvYWRFcnJvciIsImVycm9yRm9ybWF0dGVyIiwiaW5wdXQiLCJ1c2VyUGFyc2VyIiwidXNlck1pZGRsZXdhcmUiLCJvblVwbG9hZENvbXBsZXRlIiwidXNlclVwbG9hZENvbXBsZXRlIiwicmVzb2x2ZXIiLCJ1c2VyT25VcGxvYWRFcnJvciIsImNyZWF0ZUJ1aWxkZXIiLCJvcHRzIiwiY3JlYXRlVXBsb2FkdGhpbmciLCJjcmVhdGVSb3V0ZUhhbmRsZXIiLCJoYW5kbGVycyIsIlBPU1QiLCJyZXEiLCJHRVQiLCJjcmVhdGVOZXh0Um91dGVIYW5kbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/next/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/server/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/server/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_DO_NOT_USE_createRouteHandlerCore: () => (/* binding */ INTERNAL_DO_NOT_USE_createRouteHandlerCore),\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   UTFile: () => (/* binding */ UTFile),\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles),\n/* harmony export */   UploadThingError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @effect/schema/Schema */ \"(rsc)/./node_modules/@effect/schema/dist/esm/Schema.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var consola_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! consola/core */ \"(rsc)/./node_modules/consola/dist/core.mjs\");\n/* harmony import */ var effect_Logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Logger */ \"(rsc)/./node_modules/effect/dist/esm/Logger.js\");\n/* harmony import */ var effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/LogLevel */ \"(rsc)/./node_modules/effect/dist/esm/LogLevel.js\");\n/* harmony import */ var std_env__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! std-env */ \"(rsc)/./node_modules/std-env/dist/index.mjs\");\n/* harmony import */ var effect_Context__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Context */ \"(rsc)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uploadthing/internal/types */ \"(rsc)/./node_modules/uploadthing/internal/types.js\");\n/* harmony import */ var _uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/mime-types */ \"(rsc)/./node_modules/@uploadthing/mime-types/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar version = \"6.10.1\";\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    const errorFormatter = router[Object.keys(router)[0]]?._def.errorFormatter ?? defaultErrorFormatter;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return errorFormatter(error);\n}\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */ const FileUploadDataSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    name: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    size: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n    type: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\nconst FileUploadDataWithCustomIdSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(FileUploadDataSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n}));\nconst UploadedFileDataSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(FileUploadDataWithCustomIdSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n}));\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */ const PresignedBaseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    pollingJwt: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    pollingUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    contentDisposition: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.ContentDispositionSchema,\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n});\nconst MPUResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(PresignedBaseSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    urls: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    chunkSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n    chunkCount: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number\n}));\nconst PSPResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.extend(PresignedBaseSchema, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fields: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Record(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n}));\nconst PresignedURLResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Union(PSPResponseSchema, MPUResponseSchema));\nconst PollUploadResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    fileData: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        fileSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n        fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        metadata: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        callbackUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n        callbackSlug: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n    }))\n});\nconst FailureCallbackResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n    message: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n});\nconst ServerCallbackPostResponseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */ const UploadActionPayload = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    files: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(FileUploadDataSchema),\n    input: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Unknown\n});\nconst FailureActionPayload = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    storageProviderError: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String),\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n});\nconst MultipartCompleteActionPayload = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n    etags: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        tag: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        partNumber: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number\n    }))\n});\nconst isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nconst conditionalDevServer = (fileKey, apiKey)=>{\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const file = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${fileKey}`), PollUploadResponseSchema).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((res)=>res.status === \"done\" ? effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(res.fileData) : effect_Effect__WEBPACK_IMPORTED_MODULE_5__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.retry({\n            while: (err)=>err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n            schedule: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)));\n        if (file === undefined) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(`Failed to simulate callback for file ${fileKey}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"File took too long to upload\"\n            });\n        }\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logInfo(`SIMULATING FILE UPLOAD WEBHOOK CALLBACK`, callbackUrl);\n        const payload = JSON.stringify({\n            status: \"uploaded\",\n            metadata: JSON.parse(file.metadata ?? \"{}\"),\n            file: {\n                url: `https://utfs.io/f/${encodeURIComponent(fileKey)}`,\n                key: fileKey,\n                name: file.fileName,\n                size: file.fileSize,\n                customId: file.customId,\n                type: file.fileType\n            }\n        });\n        const signature = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n            try: ()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.signPayload)(payload, apiKey),\n            catch: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to sign payload\",\n                    cause: e\n                })\n        });\n        const callbackResponse = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(callbackUrl, {\n            method: \"POST\",\n            body: payload,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"uploadthing-hook\": \"callback\",\n                \"x-uploadthing-signature\": signature\n            }\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"FetchError\", ()=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(new Response(null, {\n                status: 500\n            }))));\n        if (isValidResponse(callbackResponse)) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logInfo(\"Successfully simulated callback for file\", fileKey);\n        } else {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(`\nFailed to simulate callback for file '${file.fileKey}'. Is your webhook configured correctly?\n  - Make sure the URL '${callbackUrl}' is accessible without any authentication. You can verify this by running 'curl -X POST ${callbackUrl}' in your terminal\n  - Still facing issues? Read https://docs.uploadthing.com/faq for common issues\n`.trim());\n        }\n        return file;\n    });\n};\nconst colorize = (str, level)=>{\n    // TODO: Maybe check is shell supports colors\n    switch(level){\n        case \"error\":\n        case \"fatal\":\n            return `\\x1b[41m\\x1b[30m${str}\\x1b[0m`;\n        case \"warn\":\n            return `\\x1b[43m\\x1b[30m${str}\\x1b[0m`;\n        case \"info\":\n        case \"log\":\n            return `\\x1b[44m\\x1b[30m${str}\\x1b[0m`;\n        case \"debug\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"trace\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"success\":\n            return `\\x1b[42m\\x1b[30m${str}\\x1b[0m`;\n        default:\n            return str;\n    }\n};\nconst icons = {\n    fatal: \"⨯\",\n    error: \"⨯\",\n    warn: \"⚠️\",\n    info: \"ℹ\",\n    log: \"ℹ\",\n    debug: \"⚙\",\n    trace: \"→\",\n    success: \"✓\"\n};\nfunction formatStack(stack) {\n    const cwd = \"cwd\" in std_env__WEBPACK_IMPORTED_MODULE_6__.process && typeof std_env__WEBPACK_IMPORTED_MODULE_6__.process.cwd === \"function\" ? std_env__WEBPACK_IMPORTED_MODULE_6__.process.cwd() : \"__UnknownCWD__\";\n    return \"  \" + stack.split(\"\\n\").splice(1).map((l)=>l.trim().replace(\"file://\", \"\").replace(cwd + \"/\", \"\")).join(\"\\n  \");\n}\nfunction formatArgs(args) {\n    const fmtArgs = args.map((arg)=>{\n        if ((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(arg) && typeof arg.stack === \"string\") {\n            return arg.message + \"\\n\" + formatStack(arg.stack);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return arg;\n    });\n    return fmtArgs.map((arg)=>{\n        if (typeof arg === \"string\") {\n            return arg;\n        }\n        return JSON.stringify(arg, null, 4);\n    });\n}\nconst logger = (0,consola_core__WEBPACK_IMPORTED_MODULE_1__.createConsola)({\n    reporters: [\n        {\n            log: (logObj)=>{\n                const { type, tag, date, args } = logObj;\n                const icon = icons[type];\n                const logPrefix = colorize(` ${icon} ${tag} ${date.toLocaleTimeString()} `, type);\n                const lines = formatArgs(args).join(\" \") // concat all arguments to one space-separated string (like console does)\n                .split(\"\\n\") // split all the newlines (e.g. from logged JSON.stringified objects)\n                .map((l)=>logPrefix + \" \" + l) // prepend the log prefix to each line\n                .join(\"\\n\"); // join all the lines back together\n                // eslint-disable-next-line no-console\n                console.log(lines);\n            }\n        }\n    ],\n    defaults: {\n        tag: \"UPLOADTHING\"\n    }\n});\nconst effectLoggerLevelToConsolaLevel = {\n    All: \"verbose\",\n    Fatal: \"error\",\n    Error: \"error\",\n    Info: \"info\",\n    Debug: \"debug\",\n    Trace: \"trace\",\n    Warning: \"warn\",\n    None: \"silent\"\n};\nconst withMinimalLogLevel = (level = \"info\")=>{\n    return effect_Logger__WEBPACK_IMPORTED_MODULE_7__.withMinimumLogLevel({\n        silent: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.None,\n        error: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.Error,\n        warn: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.Warning,\n        info: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.Info,\n        debug: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.Debug,\n        trace: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.Trace,\n        verbose: effect_LogLevel__WEBPACK_IMPORTED_MODULE_8__.All\n    }[level]);\n};\nconst ConsolaLogger = effect_Logger__WEBPACK_IMPORTED_MODULE_7__.replace(effect_Logger__WEBPACK_IMPORTED_MODULE_7__.defaultLogger, effect_Logger__WEBPACK_IMPORTED_MODULE_7__.make(({ logLevel, message })=>{\n    // FIXME: Probably log other stuff than just message?\n    logger[effectLoggerLevelToConsolaLevel[logLevel._tag]](message);\n}));\nconst uploadMultipart = (file, presigned)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(`Uploading file ${file.name} with ${presigned.urls.length} chunks of size ${presigned.chunkSize} bytes each`);\n        const etags = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(presigned.urls, (url, index)=>{\n            const offset = presigned.chunkSize * index;\n            const end = Math.min(offset + presigned.chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            return uploadPart({\n                url,\n                chunk: chunk,\n                contentDisposition: presigned.contentDisposition,\n                contentType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                key: presigned.key,\n                uploadId: presigned.uploadId\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((etag)=>({\n                    tag: etag,\n                    partNumber: index + 1\n                })), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)));\n        }, {\n            concurrency: \"inherit\"\n        });\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"File\", file.name, \"uploaded successfully.\");\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Completing multipart upload...\");\n        yield* completeMultipartUpload(presigned, etags);\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Multipart upload complete.\");\n    });\n/**\n * Used by server uploads where progress is not needed.\n * Uses normal fetch API.\n */ const uploadPart = (opts)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.contentDisposition)(opts.contentDisposition, opts.fileName)\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((res)=>res.ok && res.headers.get(\"Etag\") ? effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(res.headers.get(\"Etag\")) : effect_Effect__WEBPACK_IMPORTED_MODULE_5__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.retry({\n        while: (res)=>res instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n        schedule: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff,\n        times: opts.maxRetries\n    }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapErrorTag(\"RetryError\", ()=>abortMultipartUpload({\n            key: opts.key,\n            uploadId: opts.uploadId\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((res)=>{\n            effect_Effect__WEBPACK_IMPORTED_MODULE_5__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: `Failed to upload file ${opts.fileName} to S3`,\n                cause: res\n            }));\n        }))));\nconst completeMultipartUpload = (presigned, etags)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/completeMultipart\"), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean,\n        message: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String)\n    }), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId,\n            etags\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\nconst abortMultipartUpload = (presigned)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), FailureCallbackResponseSchema, {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\nconst getApiKey = (apiKey)=>{\n    if (apiKey) return apiKey;\n    if (std_env__WEBPACK_IMPORTED_MODULE_6__.process.env.UPLOADTHING_SECRET) return std_env__WEBPACK_IMPORTED_MODULE_6__.process.env.UPLOADTHING_SECRET;\n    return undefined;\n};\nconst getApiKeyOrThrow = (apiKey)=>{\n    const key = getApiKey(apiKey);\n    if (!key?.startsWith(\"sk_\")) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"MISSING_ENV\",\n            message: \"Missing or invalid API key. API keys must start with `sk_`.\"\n        });\n    }\n    return key;\n};\nclass FileSizeMismatch extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_9__.TaggedError)(\"FileSizeMismatch\") {\n    constructor(type, max, actual){\n        const reason = `You uploaded a ${type} file that was ${(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.bytesToFileSize)(actual)}, but the limit for that type is ${max}`;\n        super({\n            reason\n        });\n    }\n}\nclass FileCountMismatch extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_9__.TaggedError)(\"FileCountMismatch\") {\n    constructor(type, boundtype, bound, actual){\n        const reason = `You uploaded ${actual} file(s) of type '${type}', but the ${boundtype} for that type is ${bound}`;\n        super({\n            reason\n        });\n    }\n}\n// Verify that the uploaded files doesn't violate the route config,\n// e.g. uploading more videos than allowed, or a file that is larger than allowed.\n// This is double-checked on infra side, but we want to fail early to avoid network latency.\nconst assertFilesMeetConfig = (files, routeConfig)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const counts = {};\n        for (const file of files){\n            const type = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig));\n            counts[type] = (counts[type] ?? 0) + 1;\n            const sizeLimit = routeConfig[type]?.maxFileSize;\n            if (!sizeLimit) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.InvalidRouteConfigError(type, \"maxFileSize\");\n            }\n            const sizeLimitBytes = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fileSizeToBytes)(sizeLimit);\n            if (file.size > sizeLimitBytes) {\n                return yield* new FileSizeMismatch(type, sizeLimit, file.size);\n            }\n        }\n        for(const _key in counts){\n            const key = _key;\n            const config = routeConfig[key];\n            if (!config) return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.InvalidRouteConfigError(key);\n            const count = counts[key];\n            const min = config.minFileCount;\n            const max = config.maxFileCount;\n            if (min > max) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid config during file count - minFileCount > maxFileCount\",\n                    cause: `minFileCount must be less than maxFileCount for key ${key}. got: ${min} > ${max}`\n                });\n            }\n            if (count < min) {\n                return yield* new FileCountMismatch(key, \"minimum\", min, count);\n            }\n            if (count > max) {\n                return yield* new FileCountMismatch(key, \"maximum\", max, count);\n            }\n        }\n        return null;\n    });\nclass RequestInput extends effect_Context__WEBPACK_IMPORTED_MODULE_10__.Tag(\"uploadthing/RequestInput\")() {\n}\nconst parseAndValidateRequest = (input, opts, adapter)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const req = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.isEffect(input.req) ? input.req : effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(input.req);\n        // Get inputs from query and params\n        const url = new URL(req.url);\n        const headers = req.headers;\n        const params = url.searchParams;\n        const action = params.get(\"actionType\");\n        const slug = params.get(\"slug\");\n        const hook = headers.get(\"uploadthing-hook\");\n        const utFrontendPackage = headers.get(\"x-uploadthing-package\") ?? \"unknown\";\n        const clientVersion = headers.get(\"x-uploadthing-version\");\n        const apiKey = getApiKey(opts.config?.uploadthingSecret);\n        if (clientVersion != null && clientVersion !== version) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(`Client version mismatch. Server version: ${version}, Client version: ${clientVersion}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Client version mismatch\",\n                cause: `Server version: ${version}, Client version: ${clientVersion}`\n            });\n        }\n        if (!slug) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"No slug provided in params:\", params);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"No slug provided in params\"\n            });\n        }\n        if (slug && typeof slug !== \"string\") {\n            const msg = `Expected slug to be of type 'string', got '${typeof slug}'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: msg\n            });\n        }\n        if (!apiKey) {\n            const msg = `No secret provided, please set UPLOADTHING_SECRET in your env file or in the config`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: `No secret provided`,\n                cause: msg\n            });\n        }\n        if (!apiKey.startsWith(\"sk_\")) {\n            const msg = `Invalid secret provided, UPLOADTHING_SECRET must start with 'sk_'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: \"Invalid API key. API keys must start with 'sk_'.\",\n                cause: msg\n            });\n        }\n        if (utFrontendPackage && typeof utFrontendPackage !== \"string\") {\n            const msg = `Expected x-uploadthing-package to be of type 'string', got '${typeof utFrontendPackage}'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`x-uploadthing-package` must be a string. eg. '@uploadthing/react'\",\n                cause: msg\n            });\n        }\n        const uploadable = opts.router[slug];\n        if (!uploadable) {\n            const msg = `No file route found for slug ${slug}`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: msg\n            });\n        }\n        if (action && !(0,uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.isActionType)(action)) {\n            const msg = `Expected ${uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${action}\"`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid action type\", msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${action}`,\n                message: msg\n            });\n        }\n        if (hook && !(0,uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.isUploadThingHook)(hook)) {\n            const msg = `Expected ${uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_UT_HOOKS.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${hook}\"`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid uploadthing hook\", msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid uploadthing hook ${hook}`,\n                message: msg\n            });\n        }\n        if (!action && !hook || action && hook) {\n            const msg = `Exactly one of 'actionType' or 'uploadthing-hook' must be provided`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: msg\n            });\n        }\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"✔︎ All request input is valid\");\n        // FIXME: This should probably provide the full context at once instead of\n        // partially in the `runRequestHandlerAsync` and partially in here...\n        // Ref: https://discord.com/channels/@me/1201977154577891369/1207441839972548669\n        const contextValue = yield* _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext;\n        contextValue.baseHeaders[\"x-uploadthing-api-key\"] = apiKey;\n        contextValue.baseHeaders[\"x-uploadthing-fe-package\"] = utFrontendPackage;\n        contextValue.baseHeaders[\"x-uploadthing-be-adapter\"] = adapter;\n        const { isDev = std_env__WEBPACK_IMPORTED_MODULE_6__.isDevelopment } = opts.config ?? {};\n        if (isDev) yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logInfo(\"UploadThing dev server is now running!\");\n        const base = {\n            req,\n            config: opts.config ?? {},\n            middlewareArgs: input.middlewareArgs,\n            isDev,\n            apiKey,\n            slug,\n            uploadable,\n            hook: null,\n            action: null\n        };\n        return action ? {\n            ...base,\n            action: action\n        } : {\n            ...base,\n            hook: hook\n        };\n    });\nconst resolveCallbackUrl = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const { config, req, isDev } = yield* RequestInput;\n    let callbackUrl = new URL(req.url);\n    if (config?.callbackUrl) {\n        callbackUrl = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(config.callbackUrl);\n    } else if (std_env__WEBPACK_IMPORTED_MODULE_6__.process.env.UPLOADTHING_URL) {\n        callbackUrl = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(std_env__WEBPACK_IMPORTED_MODULE_6__.process.env.UPLOADTHING_URL);\n    }\n    if (isDev || !callbackUrl.host.includes(\"localhost\")) {\n        return callbackUrl;\n    }\n    // Production builds have to have a public URL so UT can send webhook\n    // Parse the URL from the headers\n    let parsedFromHeaders = req.headers.get(\"origin\") ?? req.headers.get(\"referer\") ?? req.headers.get(\"host\") ?? req.headers.get(\"x-forwarded-host\");\n    if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n        parsedFromHeaders = (req.headers.get(\"x-forwarded-proto\") ?? \"https\") + \"://\" + parsedFromHeaders;\n    }\n    if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n        // Didn't find a valid URL in the headers, log a warning and use the original url anyway\n        effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logWarning(\"You are using a localhost callback url in production which is not supported.\", \"Read more and learn how to fix it here: https://docs.uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\");\n        return callbackUrl;\n    }\n    return yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(parsedFromHeaders);\n});\n/**\n * Allows adapters to be fully async/await instead of providing services and running Effect programs\n */ const runRequestHandlerAsync = (handler, args, config)=>handler(args).pipe(withMinimalLogLevel(config?.logLevel), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, {\n        fetch: config?.fetch ?? globalThis.fetch,\n        baseHeaders: {\n            \"x-uploadthing-version\": version,\n            // These are filled in later in `parseAndValidateRequest`\n            \"x-uploadthing-api-key\": undefined,\n            \"x-uploadthing-be-adapter\": undefined,\n            \"x-uploadthing-fe-package\": undefined\n        }\n    }), asHandlerOutput, effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runPromise);\nconst asHandlerOutput = (effect)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchAll(effect, (error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed({\n            success: false,\n            error\n        }));\nconst handleRequest = RequestInput.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen(({ action, hook })=>{\n    if (hook === \"callback\") return handleCallbackRequest;\n    switch(action){\n        case \"upload\":\n            return handleUploadAction;\n        case \"multipart-complete\":\n            return handleMultipartCompleteAction;\n        case \"failure\":\n            return handleMultipartFailureAction;\n    }\n}), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.map((output)=>({\n        success: true,\n        ...output\n    })));\nconst buildRequestHandler = (opts, adapter)=>(input)=>handleRequest.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provideServiceEffect(RequestInput, parseAndValidateRequest(input, opts, adapter)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTags({\n            FetchError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: typeof e.error === \"string\" ? e.error : e.message,\n                    cause: e,\n                    data: e.data\n                }),\n            ParseError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"An error occured while parsing input/output\",\n                    cause: e\n                })\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(e.message)));\nconst handleCallbackRequest = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const { req, uploadable, apiKey } = yield* RequestInput;\n    const verified = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n        try: async ()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.verifySignature)(await req.clone().text(), req.headers.get(\"x-uploadthing-signature\"), apiKey),\n        catch: ()=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid signature\"\n            })\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Signature verified:\", verified);\n    if (!verified) {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Invalid signature\");\n        return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid signature\"\n        });\n    }\n    const requestInput = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(req, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n        status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n        file: UploadedFileDataSchema,\n        metadata: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Record(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Unknown)\n    }));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling callback request with input:\", requestInput);\n    const serverData = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n        try: async ()=>uploadable.resolver({\n                file: requestInput.file,\n                metadata: requestInput.metadata\n            }),\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to run onUploadComplete\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Failed to run onUploadComplete. You probably shouldn't be throwing errors here.\", error)));\n    const payload = {\n        fileKey: requestInput.file.key,\n        callbackData: serverData ?? null\n    };\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"'onUploadComplete' callback finished. Sending response to UploadThing:\", payload);\n    yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/serverCallback\"), ServerCallbackPostResponseSchema, {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return {\n        body: null\n    };\n});\nconst runRouteMiddleware = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { uploadable, middlewareArgs } = yield* RequestInput;\n        const { files, input } = opts;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Running middleware\");\n        const metadata = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n            try: async ()=>uploadable._def.middleware({\n                    ...middlewareArgs,\n                    input,\n                    files\n                }),\n            catch: (error)=>error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError ? error : new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to run middleware\",\n                    cause: error\n                })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"An error occured in your middleware function\", error)));\n        if (metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles] && metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length !== files.length) {\n            const msg = `Expected files override to have the same length as original files, got ${metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length} but expected ${files.length}`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Files override must have the same length as files\",\n                cause: msg\n            });\n        }\n        // Attach customIds from middleware to the files\n        const filesWithCustomIds = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(files, (file, idx)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n                const theirs = metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles]?.[idx];\n                if (theirs && theirs.size !== file.size) {\n                    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logWarning(\"File size mismatch. Reverting to original size\");\n                }\n                return {\n                    name: theirs?.name ?? file.name,\n                    size: file.size,\n                    customId: theirs?.customId\n                };\n            }));\n        return {\n            metadata,\n            filesWithCustomIds\n        };\n    });\nconst handleUploadAction = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const opts = yield* RequestInput;\n    const { files, input } = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(opts.req, UploadActionPayload);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling upload request with input:\", {\n        files,\n        input\n    });\n    // validate the input\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Parsing user input\");\n    const inputParser = opts.uploadable._def.inputParser;\n    const parsedInput = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tryPromise({\n        try: async ()=>getParseFn(inputParser)(input),\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid input\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"An error occured trying to parse input\", error)));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Input parsed successfully\", parsedInput);\n    const { metadata, filesWithCustomIds } = yield* runRouteMiddleware({\n        input: parsedInput,\n        files\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Parsing route config\", opts.uploadable._def.routerConfig);\n    const parsedConfig = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(opts.uploadable._def.routerConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"InvalidRouteConfig\", (err)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config\",\n            cause: err\n        })));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Route config parsed successfully\", parsedConfig);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Validating files meet the config requirements\", files);\n    yield* assertFilesMeetConfig(files, parsedConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchAll((e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: `Invalid config: ${e._tag}`,\n            cause: \"reason\" in e ? e.reason : e.message\n        })));\n    const callbackUrl = yield* resolveCallbackUrl.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Failed to resolve callback URL\", error)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"InvalidURL\", (err)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: err.message\n        })));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Retrieving presigned URLs from UploadThing. Callback URL is:\", callbackUrl.href);\n    const presignedUrls = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/prepareUpload\"), PresignedURLResponseSchema, {\n        method: \"POST\",\n        body: JSON.stringify({\n            files: filesWithCustomIds,\n            routeConfig: parsedConfig,\n            metadata,\n            callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n            callbackSlug: opts.slug\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"UploadThing responded with:\", presignedUrls);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Sending presigned URLs to client\");\n    let promise = undefined;\n    if (opts.isDev) {\n        const fetchContext = yield* _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext;\n        promise = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(presignedUrls, (file)=>conditionalDevServer(file.key, opts.apiKey), {\n            concurrency: 10\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, fetchContext), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runPromise);\n    }\n    return {\n        body: presignedUrls,\n        cleanup: promise\n    };\n});\nconst handleMultipartCompleteAction = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const opts = yield* RequestInput;\n    const requestInput = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(opts.req, MultipartCompleteActionPayload);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling multipart-complete request with input:\", requestInput);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Notifying UploadThing that multipart upload is complete\");\n    const completionResponse = yield* completeMultipartUpload({\n        key: requestInput.fileKey,\n        uploadId: requestInput.uploadId\n    }, requestInput.etags);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"UploadThing responded with:\", completionResponse);\n    return {\n        body: null\n    };\n});\nconst handleMultipartFailureAction = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n    const { req, uploadable } = yield* RequestInput;\n    const { fileKey, uploadId } = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(req, FailureActionPayload);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Handling failure request with input:\", {\n        fileKey,\n        uploadId\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Notifying UploadThing that upload failed\");\n    const failureResponse = yield* abortMultipartUpload({\n        key: fileKey,\n        uploadId\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"UploadThing responded with:\", failureResponse);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Running 'onUploadError' callback\");\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__[\"try\"]({\n        try: ()=>{\n            uploadable._def.onUploadError({\n                error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"UPLOAD_FAILED\",\n                    message: `Upload failed for ${fileKey}`\n                }),\n                fileKey\n            });\n        },\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to run onUploadError\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Failed to run onUploadError. You probably shouldn't be throwing errors here.\", error)));\n    return {\n        body: null\n    };\n});\nconst buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const permissions = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(opts.router).map((slug)=>{\n            const route = opts.router[slug];\n            const config = effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(route._def.routerConfig));\n            return {\n                slug,\n                config\n            };\n        });\n        return permissions;\n    };\n};\nfunction incompatibleNodeGuard() {\n    if (typeof std_env__WEBPACK_IMPORTED_MODULE_6__.process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = std_env__WEBPACK_IMPORTED_MODULE_6__.process.versions?.node?.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = std_env__WEBPACK_IMPORTED_MODULE_6__.process.env?.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)?.[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    // Require ^18.13.0\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(`YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`));\n    // Kill the process if it isn't going to work correctly anyway\n    // If we've gotten this far we know we have a Node.js runtime so exit is defined. Override std-env type.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    std_env__WEBPACK_IMPORTED_MODULE_6__.process.exit?.(1);\n}\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n/**\n * Extension of the Blob class that simplifies setting the `name` and `customId` properties,\n * similar to the built-in File class from Node > 20.\n */ class UTFile extends Blob {\n    constructor(parts, name, options){\n        const optionsWithDefaults = {\n            ...options,\n            type: options?.type ?? ((0,_uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_3__.lookup)(name) || \"application/octet-stream\"),\n            lastModified: options?.lastModified ?? Date.now()\n        };\n        super(parts, optionsWithDefaults);\n        this.name = name;\n        this.customId = optionsWithDefaults.customId;\n        this.lastModified = optionsWithDefaults.lastModified;\n    }\n}\nconst uploadPresignedPost = (file, presigned)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(`Uploading file ${file.name} using presigned POST URL`);\n        const formData = new FormData();\n        Object.entries(presigned.fields).forEach(([k, v])=>formData.append(k, v));\n        formData.append(\"file\", file); // File data **MUST GO LAST**\n        const res = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(presigned.url, {\n            method: \"POST\",\n            body: formData,\n            headers: new Headers({\n                Accept: \"application/xml\"\n            })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tapErrorCause(()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), FailureCallbackResponseSchema, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    fileKey: presigned.key,\n                    uploadId: null\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            })));\n        if (!res.ok) {\n            const text = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.promise(res.text);\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(`Failed to upload file ${file.name} to presigned POST URL. Response: ${text}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to upload file\",\n                cause: text\n            });\n        }\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"File\", file.name, \"uploaded successfully\");\n    });\nfunction guardServerOnly() {\n    if (false) {}\n}\nconst uploadFilesInternal = (input)=>getPresignedUrls(input).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((presigneds)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(presigneds, (file)=>uploadFile(file).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.match({\n                onFailure: (error)=>({\n                        data: null,\n                        error: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError ? error : new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            message: \"Failed to upload file.\",\n                            code: \"BAD_REQUEST\",\n                            cause: error\n                        }))\n                    }),\n                onSuccess: (data)=>({\n                        data,\n                        error: null\n                    })\n            })), {\n            concurrency: 10\n        })));\n/**\n * FIXME: downloading everything into memory and then upload\n * isn't the best. We should support streams so we can download\n * just as much as we need at any time.\n */ const downloadFiles = (urls, downloadErrors)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.forEach(urls, (_url, idx)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n            let url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url.url : _url;\n            if (typeof url === \"string\") {\n                // since dataurls will result in name being too long, tell the user\n                // to use uploadFiles instead.\n                if (url.startsWith(\"data:\")) {\n                    downloadErrors[idx] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Please use uploadFiles() for data URLs. uploadFilesFromUrl() is intended for use with remote URLs only.\"\n                    }));\n                    return null;\n                }\n            }\n            url = new URL(url);\n            const { name = url.pathname.split(\"/\").pop() ?? \"unknown-filename\", customId = undefined } = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url : {};\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(url);\n            if (!response.ok) {\n                downloadErrors[idx] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: response\n                }));\n                return undefined;\n            }\n            return yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.promise(()=>response.blob()).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((blob)=>new UTFile([\n                    blob\n                ], name, {\n                    customId\n                })));\n        }), {\n        concurrency: 10\n    });\nconst getPresignedUrls = (input)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { files, metadata, contentDisposition, acl } = input;\n        const fileData = files.map((file)=>({\n                name: file.name ?? \"unnamed-blob\",\n                type: file.type,\n                size: file.size,\n                ...\"customId\" in file ? {\n                    customId: file.customId\n                } : {}\n            }));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Getting presigned URLs for files\", fileData);\n        const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n            data: PresignedURLResponseSchema\n        });\n        const presigneds = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/uploadFiles\"), responseSchema, {\n            method: \"POST\",\n            cache: \"no-store\",\n            body: JSON.stringify({\n                files: fileData,\n                metadata,\n                contentDisposition,\n                acl\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"ParseError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"FetchError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Got presigned URLs:\", presigneds.data);\n        return files.map((file, i)=>({\n                file,\n                presigned: presigneds.data[i]\n            }));\n    });\nconst uploadFile = (input)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.gen(function*() {\n        const { file, presigned } = input;\n        if (\"urls\" in presigned) {\n            yield* uploadMultipart(file, presigned);\n        } else {\n            yield* uploadPresignedPost(file, presigned);\n        }\n        yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${presigned.key}`), PollUploadResponseSchema).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tap(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Polled upload\", presigned.key)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((res)=>res.status === \"done\" ? effect_Effect__WEBPACK_IMPORTED_MODULE_5__.succeed(undefined) : effect_Effect__WEBPACK_IMPORTED_MODULE_5__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.retry({\n            while: (err)=>err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n            schedule: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(e)));\n        return {\n            key: presigned.key,\n            url: presigned.fileUrl,\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            customId: \"customId\" in file ? file.customId ?? null : null\n        };\n    });\nfunction parseTimeToSeconds(time) {\n    const match = time.toString().split(/(\\d+)/).filter(Boolean);\n    const num = Number(match[0]);\n    const unit = (match[1] ?? \"s\").trim().slice(0, 1);\n    const multiplier = {\n        s: 1,\n        m: 60,\n        h: 3600,\n        d: 86400\n    }[unit];\n    return num * multiplier;\n}\nclass UTApi {\n    constructor(opts){\n        this.requestUploadThing = (pathname, body, responseSchema)=>{\n            const url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(pathname);\n            effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Requesting UploadThing:\", {\n                url,\n                body,\n                headers: this.defaultHeaders\n            }));\n            return (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEffJson)(url, responseSchema, {\n                method: \"POST\",\n                cache: \"no-store\",\n                body: JSON.stringify(body),\n                headers: {\n                    ...(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.filterObjectValues)(this.defaultHeaders, (v)=>typeof v === \"string\"),\n                    \"Content-Type\": \"application/json\"\n                }\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"FetchError\", (err)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Request failed:\", err).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen(()=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(err)))), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.catchTag(\"ParseError\", (err)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logError(\"Response parsing failed:\", err).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen(()=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.die(err)))), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.tap((res)=>effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"UploadThing response:\", res)));\n        };\n        this.executeAsync = (program)=>program.pipe(withMinimalLogLevel(this.logLevel), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, {\n                fetch: this.fetch,\n                baseHeaders: this.defaultHeaders\n            }), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runPromise);\n        /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   *\n   * @example\n   * await deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" })\n   */ this.deleteFiles = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/deleteFiles\", keyType === \"fileKey\" ? {\n                fileKeys: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            } : {\n                customIds: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            }, responseSchema));\n        };\n        /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ this.getFileUrls = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                data: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n                }))\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/getFileUrl\", keyType === \"fileKey\" ? {\n                fileKeys: keys\n            } : {\n                customIds: keys\n            }, responseSchema));\n        };\n        /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ this.listFiles = async (opts)=>{\n            guardServerOnly();\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                files: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                    id: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                    name: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Literal(\"Deletion Pending\", \"Failed\", \"Uploaded\", \"Uploading\")\n                }))\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/listFiles\", {\n                ...opts\n            }, responseSchema));\n        };\n        this.renameFiles = async (updates)=>{\n            guardServerOnly();\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/renameFiles\", {\n                updates: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(updates)\n            }, responseSchema));\n        };\n        /** @deprecated Use {@link renameFiles} instead. */ this.renameFile = this.renameFiles;\n        this.getUsageInfo = async ()=>{\n            guardServerOnly();\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                totalBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n                totalReadable: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                appTotalBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n                appTotalReadable: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String,\n                filesUploaded: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n                limitBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Number,\n                limitReadable: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/getUsageInfo\", {}, responseSchema));\n        };\n        /** Request a presigned url for a private file(s) */ this.getSignedURL = async (key, opts)=>{\n            guardServerOnly();\n            const expiresIn = opts?.expiresIn ? parseTimeToSeconds(opts.expiresIn) : undefined;\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            if (opts?.expiresIn && isNaN(expiresIn)) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\"\n                });\n            }\n            if (expiresIn && expiresIn > 86400 * 7) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be less than 7 days (604800 seconds).\"\n                });\n            }\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.String\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/requestFileAccess\", keyType === \"fileKey\" ? {\n                fileKey: key,\n                expiresIn\n            } : {\n                customId: key,\n                expiresIn\n            }, responseSchema));\n        };\n        /**\n   * Update the ACL of a file or set of files.\n   *\n   * @example\n   * // Make a single file public\n   * await utapi.updateACL(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", \"public-read\");\n   *\n   * // Make multiple files private\n   * await utapi.updateACL(\n   *   [\n   *     \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *     \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n   *   ],\n   *   \"private\",\n   * );\n   */ this.updateACL = async (keys, acl, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            const updates = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys).map((key)=>{\n                return keyType === \"fileKey\" ? {\n                    fileKey: key,\n                    acl\n                } : {\n                    customId: key,\n                    acl\n                };\n            });\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Struct({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_4__.Boolean\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/updateACL\", {\n                updates\n            }, responseSchema));\n        };\n        // Assert some stuff\n        guardServerOnly();\n        incompatibleNodeGuard();\n        const apiKey = getApiKeyOrThrow(opts?.apiKey);\n        this.fetch = opts?.fetch ?? globalThis.fetch;\n        this.defaultHeaders = {\n            \"x-uploadthing-api-key\": apiKey,\n            \"x-uploadthing-version\": version,\n            \"x-uploadthing-be-adapter\": \"server-sdk\",\n            \"x-uploadthing-fe-package\": undefined\n        };\n        this.defaultKeyType = opts?.defaultKeyType ?? \"fileKey\";\n        this.logLevel = opts?.logLevel;\n    }\n    async uploadFiles(files, opts) {\n        guardServerOnly();\n        const uploads = await this.executeAsync(uploadFilesInternal({\n            files: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(files),\n            contentDisposition: opts?.contentDisposition ?? \"inline\",\n            metadata: opts?.metadata ?? {},\n            acl: opts?.acl\n        }));\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Finished uploading:\", uploadFileResponse));\n        return uploadFileResponse;\n    }\n    async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const downloadErrors = {};\n        const uploads = await this.executeAsync(downloadFiles((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls), downloadErrors).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((files)=>files.filter((f)=>f != null)), effect_Effect__WEBPACK_IMPORTED_MODULE_5__.andThen((files)=>uploadFilesInternal({\n                files,\n                contentDisposition: opts?.contentDisposition ?? \"inline\",\n                metadata: opts?.metadata ?? {},\n                acl: opts?.acl\n            }))));\n        /** Put it all back together, preserve the order of files */ const responses = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls).map((_, index)=>{\n            if (downloadErrors[index]) {\n                return {\n                    data: null,\n                    error: downloadErrors[index]\n                };\n            }\n            return uploads.shift();\n        });\n        /** Return single object or array based on input urls */ const uploadFileResponse = Array.isArray(urls) ? responses : responses[0];\n        effect_Effect__WEBPACK_IMPORTED_MODULE_5__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_5__.logDebug(\"Finished uploading:\", uploadFileResponse));\n        return uploadFileResponse;\n    }\n}\nconst createUploadthing = (opts)=>createBuilder(opts);\n/** @internal */ const INTERNAL_DO_NOT_USE_createRouteHandlerCore = (opts, adapter)=>{\n    incompatibleNodeGuard();\n    const requestHandler = buildRequestHandler(opts, adapter);\n    const getBuildPerms = buildPermissionsInfoHandler(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await runRequestHandlerAsync(requestHandler, {\n            req,\n            middlewareArgs: {\n                req,\n                event: undefined,\n                res: undefined\n            }\n        }, opts.config);\n        if (response.success === false) {\n            return Response.json(formatError(response.error, opts.router), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getStatusCodeFromError)(response.error),\n                headers: {\n                    \"x-uploadthing-version\": version\n                }\n            });\n        }\n        const res = Response.json(response.body, {\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n        // @ts-expect-error - this is a custom property\n        res.cleanup = response.cleanup;\n        return res;\n    };\n    const GET = (request)=>{\n        return Response.json(getBuildPerms(), {\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nconst createRouteHandler = (opts)=>INTERNAL_DO_NOT_USE_createRouteHandlerCore(opts, \"server\");\nconst extractRouterConfig = (router)=>buildPermissionsInfoHandler({\n        router\n    })();\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createServerHandler = createRouteHandler;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/server/index.js\n");

/***/ })

};
;